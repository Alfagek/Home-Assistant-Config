#sensor 
#===============================================================
#Overige sensoren
#===============================================================
# Pollen
  - platform: waqi
    token: !secret waqi-api
    locations:
      - Europaweg, Groningen
      - Hooge Zuidwal, Kollumerwaard
#===============================================================

# template sensoren 
##########
# postbak & Brievenbus sensor         
##########
  - platform: template
    sensors:
      mailbox_last_triggered_formatted:
        friendly_name: Postbak geopend
        value_template: >-
          {% if (
              (( as_timestamp(now()) | timestamp_custom("%m%d")) | int) - ((as_timestamp(states("input_datetime.postbak_open")) | timestamp_custom("%m%d")) | int)
              ) == 0 %}
            {{ as_timestamp(states("input_datetime.postbak_open")) | timestamp_custom("%H:%M") }}
          {% else %}
            none
          {% endif %}

      brievenbus_last_triggered_formatted:
        friendly_name: Brievenbus geopend
        value_template: >-
          {% if (
              (( as_timestamp(now()) | timestamp_custom("%m%d")) | int) - ((as_timestamp(states("input_datetime.brievenbus_laatst_geopend")) | timestamp_custom("%m%d")) | int)
              ) == 0 %}
            {{ as_timestamp(states("input_datetime.brievenbus_laatst_geopend")) | timestamp_custom("%H:%M") }}
          {% else %}
            none
          {% endif %}  
#===============================================================================
# zon op en ondergang
      nextsunrise:
        entity_id: sun.sun
        friendly_name: 'zon opkomst'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom(' %H:%M ') | replace(" 0", "") }}
        icon_template: mdi:weather-sunset-up
      nextsunset:
        entity_id: sun.sun
        friendly_name: 'zon onder'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom(' %H:%M ') | replace(" 0", "") }}
        icon_template: mdi:weather-sunset-down               
#===============================================================================
# sensor voor dat iemand staat te douchen
#  - platform: template
#    sensors:
      shower_status:
        friendly_name: Douchen
        icon_template: mdi:shower-head
        value_template: >-
          {{ states('sensor.douche_humidity') | int > 80 }}
######## nachtstand voor grafieken
#sensor:
#  - platform: template
#    sensors:
      nightstate:
        friendly_name: Night State
        value_template: "{% if is_state('sun.sun', 'below_horizon') %}1{% else %}0{% endif %}"

######## themperatuur verschil woonkamer met buiten voor huis
#sensor:
#  - platform: template
#    sensors:
      delta_temp_huiskamer:
        value_template: '{{ ((float(states.sensor.atc_temperature_7d.state)) - (float(states.sensor.temperatuur_voor_temperature.state))) | round(2) }} '
#        nit_of_measurement: 'Â°C'
        friendly_name: 'Verschil temp binnen-buiten'
        icon_template: "mdi:thermometer"

# sensoren voor HA informatie
#  - platform: template 
#    sensors:
      count_automations:
        icon_template: mdi:autorenew
        value_template: "{{ states.automation | count }}"

      count_scripts:
        icon_template: mdi:script-text-outline
        value_template: "{{ states.script| count }}"

      count_device_trackers:
        icon_template: mdi:map-marker
        value_template: "{{ states.device_tracker | count }}"

      count_binary_sensors:
        icon_template: mdi:unfold-more-horizontal
        value_template: "{{ states.binary_sensor | count }}"

      count_sensors:
        icon_template: mdi:resistor
        value_template: "{{ states.sensor | count }}"

      count_switches:
        icon_template: mdi:light-switch
        value_template: "{{ states.switch | count }}"

      count_zones:
        icon_template: mdi:map-marker-radius
        value_template: "{{ states.zone | count }}"

      count_input_booleans:
        icon_template: mdi:toggle-switch
        value_template: "{{ states.input_boolean | count }}"

      count_input_numbers:
        icon_template: mdi:numeric
        value_template: "{{ states.input_number | count }}"

      count_input_texts:
        icon_template: mdi:alphabetical
        value_template: "{{ states.input_text | count }}"

      count_input_selects:
        icon_template: mdi:view-list
        value_template: "{{ states.input_select | count }}"

      count_input_datetimes:
        icon_template: mdi:calendar-clock
        value_template: "{{ states.input_datetime | count }}"

      count_lights:
        icon_template: mdi:lightbulb-outline
        value_template: "{{ states.light | count }}"

# sensoren voor HA welkom op tijd type
#  - platform: template 
#    sensors:
      time_of_day:
        value_template: >
          {% set current_hour = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if current_hour < 6 %}
          Goedenacht,
          {% elif 6 <= current_hour < 12 %}
          Goedemorgen,
          {% elif 12 <= current_hour < 18 %}
          Goedemiddag,
          {% elif 18 <= current_hour < 23 %}
          Goedeavond,
          {% else %}
          Goedenacht,
          {% endif %}

# sensoren voor HA welkom afvalinfo welke en datum
#  - platform: template
#    sensors:
      afvalinfo_next_trash_type_and_date:
        value_template: >
          {% set ns = namespace(minimum=365) %}
          {% set list = ['gft', 'kerstboom', 'papier', 'pbd', 'restafval','textiel'] %}
          {%- for l in list %}
          {%- set days = state_attr('sensor.afvalinfo_' ~l, 'days_until_collection_date')%}
          {%- if days != None and days < ns.minimum %}
          {%- set ns.minimum = days %}
          {%- endif %}
          {%- endfor %}
          {%- for l in list %}
          {%- set days = state_attr('sensor.afvalinfo_' ~l,  'days_until_collection_date')%}
          {%- if days == ns.minimum %}
          {{l}} op {{ states('sensor.afvalinfo_' ~l) }}
          {%- endif %}
          {%- endfor %}